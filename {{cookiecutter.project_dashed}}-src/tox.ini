[tox]
envlist = {{cookiecutter.python_tox}},flake8,safety

[testenv]
passenv =
    # Pass this through for testing with docker-run-tests locally.
    {{ cookiecutter.db_url_env_name }}
setenv =
    PIP_EXTRA_INDEX_URL=https://package-index.level12.net

# Ignore all "not installed in testenv" warnings.
whitelist_externals = *

# pip is used below to install, so it doesn't get clobbered by pip-sync
skip_install = true

deps = pip-tools

commands =
    pip-sync --quiet requirements/common.txt
    pip install -e .
    py.test \
        # turn warnings into errors
        # Can't use the next line due to https://github.com/kvesteri/sqlalchemy-utils/issues/268
        # -Werror \
        # feed a blank file so that a user's default pytest.ini doesn't get used
        -c .ci/pytest.ini \
        -ra \
        --tb native \
        --strict \
        --cov {{cookiecutter.project_namespace}} \
        --cov-config .coveragerc \
        --cov-report xml \
        --no-cov-on-fail \
        --junit-xml={toxinidir}/.ci/test-reports/{envname}.pytests.xml \
        {{cookiecutter.project_namespace}}

    # Make sure alembic migrations only have one head.
    python scripts/count-heads.py

[testenv:flake8]
basepython = {{cookiecutter.python_executable}}
skip_install = true
usedevelop = false
deps =
    flake8
    git+https://github.com/level12/flake8-level12.git#egg=flake8_level12
commands =
    flake8 {{cookiecutter.project_namespace}}

[testenv:safety]
skip_install = true
usedevelop = false
deps =
    safety
commands =
    safety check -r requirements/dev.txt

[testenv:db-restore]
# Run the commands to test a database backup and run tests after restoring that backup.
basepython = {{cookiecutter.python_executable}}
commands =
    pip-sync --quiet requirements/common.txt
    pip install -e .
    # You wouldn't typically create the db schema just to back it up and restore it.  This test
    # is really designed to just make sure that running the commands doesn't produce an error.
    # In a real world scenario, you would use `ansible/create-backup.yaml -t sql` to create
    # the SQL schema file and then you'd run pytest w/ --db-restore to test against that backup
    # plus any migrations.
    {{cookiecutter.project_namespace}} --profile TestProfile develop db init --clear-first
    {{cookiecutter.project_namespace}} --profile TestProfile db backup both
    py.test \
        --db-restore \
        # feed a blank file so that a user's default pytest.ini doesn't get used
        -c .ci/pytest.ini \
        -ra \
        --tb native \
        --strict \
        {{cookiecutter.project_namespace}}
